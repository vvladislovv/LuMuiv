import time

from aiogram import Bot, Router, F, types
from aiogram.types import Message, File, FSInputFile
from aiogram.fsm.context import FSMContext

import config, math, random, os
from fnmatch import fnmatch
from datetime import datetime
from handlers.FSM import FSM
from handlers.DataBase import update_data, GetDataUser, UsingBot, UpdateIDSQL, FindUserData
from handlers.Keyboard import createKeyboard, createKeyNextLevel
from handlers.Methods import *
Callback_router = Router(name=__name__)

@Callback_router.callback_query(F.data == "Main")
async def MainGlobule(call:  types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    keyword = createKeyNextLevel([
        ("üòä –ù–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä", "Sticker"),
        ("üí≠ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "Msg"),
        ("üìï UDiary - –ë–æ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", "UDiaryBot"),
        # ("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", "Profile")
    ], 2, 1)

    await call.message.answer(" –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:)", reply_markup=keyword.as_markup())

@Callback_router.callback_query(F.data == 'NoPhoto')
async def callback_query(call: types.CallbackQuery, state: FSMContext) -> None:
    try:
        await UpdateIDSQL({
            "IDType": "IDimage"
        })

        keyword = createKeyboard([
            ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
        ], 1)

        await call.message.answer("üì∏ –§–æ—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.",reply_markup=keyword.as_markup())
       # await call.message.answer("‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        await state.clear()
        #await call.message.edit_reply_markup(reply_markup=None)
    except Exception as Err:
        print(f"Error {Err}")


@Callback_router.callback_query(F.data.in_({'Sticker', 'Sticker2', 'Msg', 'NoMsg', 'YesPhotoOne', 'EditPhoto','YesMsg', 'NoMsgOne', 'UpdateMSG'}),)
async def Callback_Query_Main(call: types.CallbackQuery, state: FSMContext) -> None:
    if call.data == "Sticker":
        DataUser: tuple = await FindUserData(call)
        GetUser: tuple = await GetDataUser(DataUser)

        if GetUser[6] == None:
            keyword = createKeyboard([
                ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
            ], 1)
            await call.message.answer("üñºÔ∏è–ü—Ä–µ—à–ª–∏—Ç–µ –æ–¥–Ω–æ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ:",reply_markup=keyword.as_markup())
            #await call.message.edit_reply_markup(reply_markup=None)
            await state.update_data(name=F.data.text)
            await state.set_state(FSM.photo)
        elif GetUser[6] != None:
            await call.message.answer(
                f"üòå–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä. –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∏–∫–µ—Ä!")
    elif call.data == "Sticker2":
        await call.message.answer("üñºÔ∏è–ü—Ä–µ—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ:")
        # await call.message.edit_reply_markup(reply_markup=None)
        await state.update_data(name=F.data.text)
        await state.set_state(FSM.changeImg)
    elif call.data == "Msg":
        try:
            DataUser : tuple = await FindUserData(call)
            GetUser : tuple = await GetDataUser(DataUser)

            if GetUser[5] == None:
                keyword = createKeyboard([
                    ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
                ], 1)
                await state.update_data(name=F.data.text)
                await state.set_state(FSM.msg)
                await call.message.answer("üí≠–ù–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",reply_markup=keyword.as_markup())
                #await call.message.edit_reply_markup(reply_markup=None)
            elif GetUser[5] != None:
                await call.message.answer(
                    f"üòå–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

        except Exception as Err:
            print(f"Error {Err}")
    elif call.data == "NoMsg":
        await UpdateIDSQL({
            'IDType': 'IDmsg'
        })

        keyword = createKeyboard([
            ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
        ], 1)

        await call.message.answer("üìÑ –¢–µ–∫—Å—Ç –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã –≤–∞—Å –æ–ø–æ–≤–µ—Å—Ç–∏–º.",reply_markup=keyword.as_markup())
        # await call.message.answer("‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        await state.clear()
        await call.message.edit_reply_markup(reply_markup=None)
    elif call.data == "YesPhotoOne":
        keyword = createKeyboard([
            ("–ù–µ—Ç", "StickerAdmin"),
            ("–î–∞", "NoPhotoUser"),
        ], 2)

        await call.message.answer("‚ùì–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–µ?", reply_markup=keyword.as_markup())
    elif call.data == 'EditPhoto':
        await call.message.answer("‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        await state.update_data(name=F.data.text)
        await state.set_state(FSM.changeImg)
    elif call.data == "YesMsg":
        await call.message.answer("üìù –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç")
        await call.message.edit_reply_markup(reply_markup=None)
    elif call.data == "NoMsgOne":
        await call.message.edit_reply_markup(reply_markup=None)

        keyword = createKeyboard([
            ("–ù–µ—Ç", "MsgAdmin"),
            ("–î–∞", "DestroyMsg"),
        ], 2)

        await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–µ?", reply_markup=keyword.as_markup())
    elif call.data == "UpdateMSG":
        await state.update_data(name=F.data.text)
        await state.set_state(FSM.changeMsg)
        await call.message.answer("–ò–∑–º–µ–Ω–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

@Callback_router.callback_query(F.data == "StickerAdmin")
async def sticker_admin(call: types.CallbackQuery, state: FSMContext) -> None:
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–µ–µ
            if records:
                await UpdateIDSQL({
                    "IDType": "IDimage"
                })
                # await call.message.delete()
                #await call.message.edit_reply_markup(reply_markup=None)

                keyword = createKeyNextLevel([
                    ("–ù–µ—Ç", "YesPhotoOne"),
                    ("–î–∞", "NoPhotoOne"),
                    ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", "PhotoPublic"),
                ], 2,1)

                for row in records:
                    if row[9] == "1" and row[6] != None:
                        previous_image_pattern = f"{row[0]}_*.jpg"
                        for old_file in os.listdir('PhotoDB'):
                            if fnmatch(old_file, previous_image_pattern):
                                photo_file = FSInputFile(path=os.path.join('PhotoDB', old_file))
                                await call.message.answer_photo(photo=photo_file, caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {int(row[0])} –∏–ª–∏ {'@' + row[1]}\n"
                                  f"–°—Ç–∞–¥–∏—è: {row[7]}\n"
                                    f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n", reply_markup=keyword.as_markup())
                    '''elif row[9] == "-1" and row[6] == None and row[7] == None:
                        await call.message.answer(f"–í —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è:)")'''


    except Exception as e:

        print(f"Error: {str(e)}")

@Callback_router.callback_query(F.data == "NoPhotoUser")
async def callback_query(call: types.CallbackQuery, state: FSMContext) -> None:
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            if records:
                for row in records:
                    if row[9] == "1":
                        await call.bot.send_message(chat_id=row[0],
                                                    text="üòî–í–∞—à —Å—Ç–∏–∫–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

                        await update_data({
                            'UserID': row[0],
                            'Type': "Image",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "TypeAction",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "Stage",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "IDimage",
                            'value': "-1", # –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞
                        })

                        previous_image_pattern = f"{row[0]}_*.jpg"

                        for old_file in os.listdir('PhotoDB'):
                            if fnmatch(old_file, previous_image_pattern):
                                os.remove(os.path.join('PhotoDB', old_file))

                        conn.commit()
    except Exception as e:
        print(f"Error: {e}")


@Callback_router.callback_query(F.data == "NoPhotoOne")
async def AnswerYesPhoto(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            if records:
                for row in records:
                    if row[9] == "1":

                        await call.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({int(row[0])} –∏–ª–∏ {'@'+row[1]})")
                        previous_image_pattern = f"{row[0]}_*.jpg"

                        for old_file in os.listdir('PhotoDB'):
                            if fnmatch(old_file, previous_image_pattern):
                                photo_file = FSInputFile(path=os.path.join('PhotoDB', old_file))
                                await call.message.answer_photo(photo=photo_file)

                        keyword = createKeyboard([
                            ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–æ—Ç–æ", "EditPhoto"),
                            ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª","PhotoPublic"),
                            ("–ù–∞–∑–∞–¥", "StickerAdmin")
                        ],3)

                        await call.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyword.as_markup())
    except Exception as e:
        print(f"Error: {e}")

@Callback_router.callback_query(F.data == "PhotoPublic")
async def EditPhoto(call: types.CallbackQuery, state: FSMContext):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            if records:
                for row in records:
                    if row[9] == "1":
                        previous_image_pattern = f"{row[0]}_*.jpg"
                        for old_file in os.listdir('PhotoDB'):
                            if fnmatch(old_file, previous_image_pattern):
                                photo_file = FSInputFile(path=os.path.join('PhotoDB', old_file))
                                await call.bot.send_photo(chat_id=config.Chanaleid,photo=photo_file)
                                await call.bot.send_message(chat_id=row[0],
                                                            text="ü•≥–í–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–∏–Ω—è–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é! –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é /start")

                        await update_data({
                            'UserID': row[0],
                            'Type': "Image",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "TypeAction",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "Stage",
                            'value': None,
                        })
                        await update_data({
                            'UserID': row[0],
                            'Type': "IDimage",
                            'value': "-1",  # –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞
                        })

                        previous_image_pattern = f"{row[0]}_*.jpg"

                        for old_file in os.listdir('PhotoDB'):
                            if fnmatch(old_file, previous_image_pattern):
                                os.remove(os.path.join('PhotoDB', old_file))

                        conn.commit()

    except Exception as e:
            print(f"Error: {e}")


#! MSG SCRIPT

@Callback_router.callback_query(F.data == "MsgAdmin")
async def msg_admin(call: types.CallbackQuery) -> None:
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–∞ –±—É–¥—É—â–µ–µ
            if records:
                await UpdateIDSQL({
                    'IDType': 'IDmsg'
                })
                # await call.message.delete()
                #await call.message.edit_reply_markup(reply_markup=None)

                keyword = createKeyNextLevel([
                    ("–ù–µ—Ç", "NoMsgOne"),
                    ("–î–∞", "YesMsgOne"),
                    ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª","MsgPublic")
                ], 2,1)

                for row in records:
                    if row[8] == "1" and row[5] != None:
                        await call.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {int(row[0])} –∏–ª–∏ {'@' + row[1]}\n"
                          f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {row[5]}\n"
                          f"–°—Ç–∞–¥–∏—è: {row[7]}\n\n"  f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"
                                                  , reply_markup=keyword.as_markup())



    except Exception as e:

        print(f"Error: {str(e)}")

@Callback_router.callback_query(F.data == "UDiaryBot")
async def UDiaryBotAnswer(call: types.CallbackQuery) -> None:
    keyword = createKeyboard([
        ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
    ], 1)
    await call.message.answer(f"‚úèÔ∏è–¢—ã —É—á–∏—à—å—Å—è –≤ –ú–£–ò–í, –∏ —Ç—ã –Ω–µ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –±–æ—Ç–æ–º UDiary?\n\n"
                       f"–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –≤ –Ω–µ–º —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é! \n\n"
                       f"–•–æ—á—É –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å, –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º! –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç–æ—á–Ω–æ–µ, –ø–æ —ç—Ç–æ–º—É —Å–ª–µ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ :)\n\n"
                       f"ü§ñ UDiary - @udiarybot\n"
                       f"‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–∏ UDiary - @udiary_news\n"
                       f"üîç –ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ - @andrianovse\n", reply_markup=keyword.as_markup())

@Callback_router.callback_query(F.data == "Profile") # –î–æ–±–∞–≤–∏—Ç—å
async def ProfileAnswer(call: types.CallbackQuery) -> None:
    keyword = createKeyboard([
        ("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "Main"),
    ], 1)
    await call.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –ø—Ä–æ—Ñ–∏–ª–µ:\n\n"
                              f"–í–∞—à–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ - 0\n"
                              f"–ü—Ä–∏–Ω—è—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - 0\n"
                              f"–û—Ç–∫–∑–∞–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–π - 0\n\n"
                              f"–í–∞—à–µ –∫–æ–ª-–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—Å–µ–≥–æ - 0\n"
                              f"–ü—Ä–∏–Ω—è—Ç—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ - 0\n"
                              f"–û—Ç–∫–∑–∞–Ω–æ –≤ —Å—Ç–∏–∫–µ—Ä–∞—Ö - 0\n\n"
                              f"", reply_markup=keyword.as_markup())


# DELETE BASE DATA
@Callback_router.callback_query(F.data == "DeleteBase")
async def delete_base(call: types.CallbackQuery, state: FSMContext) -> None:
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM DataUsers")
        records = cursor.fetchall()
        for record in records:
            await call.message.answer(record[1])

    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(FSM.delet_Data)


@Callback_router.callback_query(F.data == "DestroyMsg")
async def AnswerDestroyMsg(call: types.CallbackQuery, state: FSMContext):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            if records:
                for row in records:
                    if row[8] == "1":
                        await call.bot.send_message(chat_id=row[0], text="üòî –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

                        await update_data({
                            'UserID': row[0],
                            'Type': "Message",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "TypeAction",
                            'value': None,
                        })

                        await update_data({
                            'UserID': row[0],
                            'Type': "Stage",
                            'value': None,
                        })
                        await update_data({
                            'UserID': row[0],
                            'Type': "IDmsg",
                            'value': "-1",
                        })

                        conn.commit()
    except Exception as e:
        print(f"Error: {e}")
        
        
@Callback_router.callback_query(F.data == "YesMsgOne")
async def AnswerYesMsg(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()

            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            if records:
                for row in records:
                    if row[8] == "1":
                        await call.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ({int(row[0])} –∏–ª–∏ {'@'+row[1]})")
                        await call.message.answer(row[5])

                        keyword = createKeyboard([
                            ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "UpdateMSG"),
                            ("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª","MsgPublic"),
                            ("–ù–∞–∑–∞–¥", "MsgAdmin")
                        ],3)
                        await call.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyword.as_markup())
    except Exception as e:
        print(f"Error: {e}")

@Callback_router.callback_query(F.data == "MsgPublic")
async def MsgChannel(call: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DataUsers")
            records = cursor.fetchall()
            for row in records:
                if row[8] == "1":
                    await call.bot.send_message(chat_id=config.Chanaleid, text=row[5])
                    await call.bot.send_message(chat_id=row[0], text="ü•≥ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :) /start")
                    # SAVE IN HISTORY REQUESTS

                    await update_data({
                        'UserID': row[0],
                        'Type': "Message",
                        'value': None,
                    })

                    await update_data({
                        'UserID': row[0],
                        'Type': "Stage",
                        'value': None,
                    })

                    await update_data({
                        'UserID': row[0],
                        'Type': "TypeAction",
                        'value': None,
                    })

                    await update_data({
                        'UserID': row[0],
                        'Type': "IDmsg",
                        'value': "-1",
                    })

                    conn.commit()

    except Exception as Er:
        print(f"Error: {Er}")